package com.main.serviceImpl;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.apache.commons.lang3.RandomStringUtils;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.main.exception.ResourceNotFoundException;
import com.main.model.Image;
import com.main.model.User;
import com.main.payload.UserDto;
import com.main.repo.ImageRepo;
import com.main.repo.UserRepo;
import com.main.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepo userRepo;

	@Autowired
	private ModelMapper mapper;

	@Autowired
	private ImageRepo imageRepo;

	@Value("${upload.base-directory}")
	private String baseUploadDir;

	@Override
	public UserDto createUser(UserDto userDto) {
		User user = this.mapper.map(userDto, User.class);
		String id = UUID.randomUUID().toString();
		user.setId(id);
		User save = this.userRepo.save(user);
		return this.mapper.map(save, UserDto.class);

	}

	@Override
	public UserDto findUserById(String id) {
		User user = this.userRepo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("No user found with id :" + id));
		return this.mapper.map(user, UserDto.class);

	}

	public void uploadUserImages(String userId, MultipartFile[] files) throws Exception, IOException {
		User user = userRepo.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("User not found with id: " + userId));

		for (MultipartFile file : files) {
			String fileName = StringUtils.cleanPath(file.getOriginalFilename());
			String randomStr = RandomStringUtils.random(10,
					"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
			String uniqueStr = randomStr + UUID.randomUUID().toString() + fileName;

			String userUploadDir = baseUploadDir + user.getId();
			Path uploadPath = Paths.get(userUploadDir);

			if (!Files.exists(uploadPath)) {
				Files.createDirectories(uploadPath);
			}

			Image imgModel = new Image();
			String imgId = UUID.randomUUID().toString();
			imgModel.setId(imgId);
			imgModel.setImgName(uniqueStr);
			imgModel.setUser(user);
			imgModel.setImgPath(userUploadDir + "/" + uniqueStr);

			user.getImages().add(imageRepo.save(imgModel));

			FileUploadUtil.saveFile(uploadPath.toString(), uniqueStr, file);
		}

		userRepo.save(user);
	}

	@Override
	public void deleteImage(String imageId, String userId) {
		Image image = this.imageRepo.findById(imageId)
				.orElseThrow(() -> new ResourceNotFoundException("No image found with image_id : " + imageId));
		User user = this.userRepo.findById(userId)
				.orElseThrow(() -> new ResourceNotFoundException("No user found with userId: " + userId));

		// Remove the association from user_images table
		user.getImages().remove(image);
		this.userRepo.save(user); // Update the user entity to remove the association

		// Delete the image file from the file system
		String imagePath = image.getImgPath(); // Get the image path from the Image entity
		File imageFile = new File(imagePath);
		if (imageFile.exists()) {
			if (imageFile.delete()) {
				System.out.println("Image file deleted successfully.");
			} else {
				System.out.println("Failed to delete image file.");
			}
		}

		// Now you can delete the image from the imageRepo
		this.imageRepo.delete(image);
	}

}
